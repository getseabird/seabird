name: release

on:
  pull_request:
  push:

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    container:
      image: debian:trixie
      env:
        DEBIAN_FRONTEND: noninteractive
    steps:
      - if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: echo "flags=--snapshot" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          # dpkg --add-architecture arm64
          apt update
          apt install -yq libgtk-4-dev libgtksourceview-5-dev libadwaita-1-dev libgirepository1.0-dev git zip golang-go libglib2.0-dev-bin
          # apt install -yq gcc-aarch64-linux-gnu libc6-dev-arm64-cross libgtk-4-dev:arm64 libgtksourceview-5-dev:arm64 libadwaita-1-dev:arm64 libgirepository1.0-dev:arm64
          git config --global --add safe.directory '*'
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v4
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          args: release -f build/linux/.goreleaser.yaml --clean ${{ env.flags }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOS: linux
      - name: Vendor dependencies
        run: |
          git archive -o source.zip ${{ github.ref }}
          go mod vendor
          sed -i 's/"dev"/"${{ github.ref_name }}"/g' main.go
          zip -r source.zip vendor main.go
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        name: Upload source to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: source.zip
          tag: ${{ github.ref }}
      - uses: actions/upload-artifact@v4
        with:
          name: goreleaser
          path: |
            dist
            source.zip
  msys2:
    needs: goreleaser
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up msys
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          release: false
          install: |
            git zip
            mingw-w64-x86_64-gcc 
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-gtk4
            mingw-w64-x86_64-libadwaita
            mingw-w64-x86_64-gtksourceview5
            mingw-w64-x86_64-gobject-introspection
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-go
      - name: Build
        run: |
          set -x
          export PATH="/mingw64/bin:$PATH"
          export GOROOT=/mingw64/lib/go
          export GOPATH=/mingw64
          go run github.com/goreleaser/goreleaser@latest build -f build/windows/.goreleaser.yaml --single-target --snapshot
          dist="$(pwd)/dist/seabird_windows_amd64_v1/"
          pushd $dist
          ldd seabird.exe | grep "=> /mingw64/bin/" | cut -d ' ' -f1 | xargs -I{} cp /mingw64/bin/{} .
          for run in {1..5}; do
            ldd *.dll | { grep "=> /mingw64/bin/" || true; } | cut -d ' ' -f1 | xargs -I{} cp /mingw64/bin/{} .
          done
          cp /mingw64/bin/librsvg*.dll  /mingw64/bin/gdbus.exe ../../README.md ../../LICENSE .
          pushd /mingw64 && cp --parents -r ./share/glib-2.0/schemas/gschemas.compiled ./share/gtk-4.0 ./share/gtksourceview-5 ./share/icons ./lib/gdk-pixbuf-2.0 $dist && popd
      - uses: caphyon/advinst-github-action@main
        with:
          aip-path: build/windows/installer.aip
          aip-build-name: DefaultBuild
          aip-output-dir: ${{ github.workspace }}\dist
          aip-package-name: seabird_windows_amd64.msi
          aip-commands: |
            SetVersion 0.0.1
      - uses: actions/upload-artifact@v4
        with:
          name: msys2
          path: dist\seabird_windows_amd64.msi
          if-no-files-found: error
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist\seabird_windows_amd64.msi
          tag: ${{ github.ref }}
  darwin:
    needs: goreleaser
    strategy:
      matrix:
        include:
          - arch: amd64
            builder: macos-13
          - arch: arm64
            builder: macos-14
    name: "darwin-${{ matrix.arch }}"
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - uses: actions/setup-go@v5
        with:
          go-version: "1.21"
      - name: Install dependencies
        run: |
          brew install gtk4 pkg-config gobject-introspection gtksourceview5 libadwaita hicolor-icon-theme adwaita-icon-theme create-dmg
      - name: Build
        run: |
          go run github.com/goreleaser/goreleaser@latest build -f build/darwin/.goreleaser.yaml --single-target --snapshot

          dist=dist/seabird_darwin_${{ matrix.arch }}
          [[ "${{ matrix.arch }}" == "amd64" ]] && dist=${dist}_v1
          brew_prefix=$(brew --prefix)
          mkdir -p $dist/lib/gdk-pixbuf-2.0 $dist/share/glib-2.0/schemas $dist/share/icons

          cp README.md LICENSE build/darwin/seabird.sh $dist
          otool -L $dist/seabird | awk -v pat="$brew_prefix" '$0~pat {print $1}' | xargs -I '{}' cp '{}' $dist/lib

          for lib in \
            libfribidi.0.dylib \
            libgmodule-2.0.0.dylib \
            libpangoft2-1.0.0.dylib \
            libfreetype.6.dylib \
            libpng16.16.dylib \
            libappstream.5.dylib \
            libepoxy.0.dylib \
            libfontconfig.1.dylib \
            libgraphite2.3.dylib \
            libjpeg.8.dylib \
            libtiff.6.dylib \
            libharfbuzz-gobject.0.dylib \
            libX11.6.dylib \
            libxmlb.2.dylib \
            libcairo-script-interpreter.2.dylib \
            libXext.6.dylib \
            libyaml-0.2.dylib \
            libXrender.1.dylib \
            libxcb.1.dylib \
            libxcb-render.0.dylib \
            libxcb-shm.0.dylib \
            libpixman-1.0.dylib \
            libXau.6.dylib \
            liblzo2.2.dylib \
            libXdmcp.6.dylib \
            librsvg-2.2.dylib \
          ; do
            cp -f $brew_prefix/lib/$lib $dist/lib
          done

          cp -r $brew_prefix/lib/gdk-pixbuf-2.0 $dist/lib
          sed -i '' "s|$brew_prefix/||" $dist/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
          cp -r $brew_prefix/share/glib-2.0/schemas $dist/share/glib-2.0
          cp -r $brew_prefix/opt/gtksourceview5/share/gtksourceview-5 $dist/share/gtksourceview-5 
          cp -r $brew_prefix/opt/gtk4/share/gtk-4.0 $dist/share
          cp -r $brew_prefix/share/icons/hicolor $brew_prefix/opt/adwaita-icon-theme/share/icons/Adwaita $dist/share/icons

          mkdir -p dist/dmg/Seabird.app/Contents/MacOS dist/dmg/Seabird.app/Contents/Resources
          cp build/darwin/icon.icns dist/dmg/Seabird.app/Contents/Resources
          cp build/darwin/Info.plist dist/dmg/Seabird.app/Contents
          cp -r $dist/. dist/dmg/Seabird.app/Contents/MacOS

          # https://github.com/actions/runner-images/issues/7522
          sudo pkill -9 XProtect >/dev/null || true;

          create-dmg --volname Seabird --volicon build/darwin/icon.icns --window-pos 200 120 --window-size 400 400 --icon-size 100 --icon "Seabird.app" 100 190 --hide-extension "Seabird.app" --app-drop-link 300 185 seabird_darwin_${{ matrix.arch }}.dmg dist/dmg
      - uses: actions/upload-artifact@v4
        with:
          name: darwin_${{ matrix.arch }}
          path: seabird_darwin_${{ matrix.arch }}.dmg
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: seabird_darwin_${{ matrix.arch }}.dmg
          tag: ${{ github.ref }}
